{
    "metric_name":"Pearson Correlation Coefficient (pearsonr)",
    "metric_description":"Pearson correlation coefficient and p-value for testing non-correlation.\nThe Pearson correlation coefficient measures the linear relationship between two datasets. The calculation of the p-value relies on the assumption that each dataset is normally distributed. Like other correlation coefficients, this one varies between -1 and +1 with 0 implying no correlation. Correlations of -1 or +1 imply an exact linear relationship. Positive correlations imply that as x increases, so does y. Negative correlations imply that as x increases, y decreases.\nThe p-value roughly indicates the probability of an uncorrelated system producing datasets that have a Pearson correlation at least as extreme as the one computed from these datasets.",
    "how_to_use":{
        "description":"This metric takes a list of predictions and a list of references as input",
        "simple_code_examples":[
            {
                "example_name":null,
                "example_description":null,
                "example_code":[
                    "pearsonr_metric = datasets.load_metric(\"pearsonr\")",
                    "results = pearsonr_metric.compute(predictions=[10, 9, 2.5, 6, 4], references=[1, 2, 3, 4, 5])",
                    "print(round(results['pearsonr']), 2)",
                    ["-0.74"]
                ]
            }
        ]
    },
    "input_fields":[
        {
            "input_name":"predictions",
            "input_type":"`list` of `int`",
            "default_value":null,
            "explanation":"Predicted class labels, as returned by a model.",
            "possible_values":null
        },
        {
            "input_name":"references",
            "input_type":"`list` of `int`",
            "default_value":null,
            "explanation":"Ground truth labels.",
            "possible_values":null
        },
        {
            "input_name":"return_pvalue",
            "input_type":"`boolean`",
            "default_value":"`False`",
            "explanation":"If `True`, returns the p-value, along with the correlation coefficient. If `False`, returns only the correlation coefficient.",
            "possible_values":null
        }
    ],
    "output_explanation":"",
    "output_fields":[
        {
            "output_name":"pearsonr",
            "output_type":"`float`",
            "explanation":"Pearson correlation coefficient.",
            "minimum_possible_value":"-1",
            "maximum_possible_value":"1",
            "explanation_of_values":"Values of 1 and -1 indicate exact linear positive and negative relationships, respectively. A value of 0 implies no correlation."
        },
        {
            "output_name":"p-value",
            "output_type":"`float`",
            "explanation":"P-value, which roughly indicates the probability of an The p-value roughly indicates the probability of an uncorrelated system producing datasets that have a Pearson correlation at least as extreme as the one computed from these datasets.",
            "minimum_possible_value":"0",
            "maximum_possible_value":"1",
            "explanation_of_values":"Higher values indicate higher probabilities."
        }
    ],
    "output_examples":[
        "{'pearsonr': -0.7}",
        "{'p-value': 0.15}"
    ],
    "values_from_popular_papers":"",
    "code_examples":[
        {
            "example_name":"Example 1",
            "example_description":"A simple example using only predictions and references.",
            "example_code":[
                "pearsonr_metric = datasets.load_metric(\"pearsonr\")",
                "results = pearsonr_metric.compute(predictions=[10, 9, 2.5, 6, 4], references=[1, 2, 3, 4, 5])",
                "print(round(results['pearsonr'], 2))",
                ["-0.74"]
            ]
        },
        {
            "example_name":"Example 2",
            "example_description":"The same as Example 1, but that also returns the `p-value`.",
            "example_code":[
                "pearsonr_metric = datasets.load_metric(\"pearsonr\")",
                "results = pearsonr_metric.compute(predictions=[10, 9, 2.5, 6, 4], references=[1, 2, 3, 4, 5], return_pvalue=True)",
                "print(sorted(list(results.keys())))",
                ["['p-value', 'pearsonr']"],
                "print(round(results['pearsonr'], 2))",
                ["-0.74"],
                "print(round(results['p-value'], 2))",
                ["0.15"]
            ]
        }
    ],
    "limitations_and_bias":"",
    "citations":[
        "@article{2020SciPy-NMeth,\nauthor  = {Virtanen, Pauli and Gommers, Ralf and Oliphant, Travis E. and\n      Haberland, Matt and Reddy, Tyler and Cournapeau, David and\n      Burovski, Evgeni and Peterson, Pearu and Weckesser, Warren and\n      Bright, Jonathan and {van der Walt}, St{\\'e}fan J. and\n      Brett, Matthew and Wilson, Joshua and Millman, K. Jarrod and\n      Mayorov, Nikolay and Nelson, Andrew R. J. and Jones, Eric and\n      Kern, Robert and Larson, Eric and Carey, C J and\n      Polat, {\\.I}lhan and Feng, Yu and Moore, Eric W. and\n      {VanderPlas}, Jake and Laxalde, Denis and Perktold, Josef and\n      Cimrman, Robert and Henriksen, Ian and Quintero, E. A. and\n      Harris, Charles R. and Archibald, Anne M. and\n      Ribeiro, Ant{\\^o}nio H. and Pedregosa, Fabian and\n      {van Mulbregt}, Paul and {SciPy 1.0 Contributors}},\ntitle   = {{{SciPy} 1.0: Fundamental Algorithms for Scientific\n      Computing in Python}},\njournal = {Nature Methods},\nyear    = {2020},\nvolume  = {17},\npages   = {261--272},\nadsurl  = {https://rdcu.be/b08Wh},\ndoi = {10.1038/s41592-019-0686-2},\n}"
    ],
    "further_references":null
}