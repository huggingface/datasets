कंप्यूटर विज्ञान में, पोलिमोर्फ़िज्म प्रोग्रामिंग भाषा की एक विशेषता है जो डेटा के भिन्न प्रकारों को एक समान इंटरफेस का उपयोग करते हुए हेंडल करने में मदद करती है। पैरामीट्रिक पोलिमोर्फ़िज्मकी अवधारणा डेटा के प्रकार और फंक्शन दोनों पर लागू होती है। एक फंक्शन जो भिन्न प्रकारों के मान का मूल्यांकन कर सकता है या इन पर लागू हो सकता है एक बहुरूपी फंक्शन कहलाता है। 
एक डेटा प्रकार जो एक सामान्यीकृत प्रकार  के रूप में प्रकट हो सकता है, वह सामान्यीकृत प्रकार की तरह निर्दिष्ट बहुरूपी डेटा प्रकार है, जिससे इस प्रकार की विशेषज्ञता का निर्माण होता है। 
मूल रूप से पोलिमोर्फ़िज्मके दो भिन्न प्रकार हैं, जिनका वर्णन अनौपचारिक रूप से 1967 में क्रिस्टोफर स्ट्रेची के द्वारा किया गया था। यदि वास्तविक प्रकारों की रेंज जिसे परिमित और संयोजन में प्रयुक्त किया जा सकता है, उसे उपयोग से व्यग्तिगत रूप से निर्दिष्ट किया जाना चाहिए, यह तदर्थ पोलिमोर्फ़िज्म कहलाती है। यदि सभी कोड किसी विशेष प्रकार के उल्लेख के बिना लेखे गए हैं और इस प्रकार से इन्हें नए प्रकार की किसी भी संख्या के साथ प्रयुक्त किया जा सकता है, यह पैरामीट्रिक पोलिमोर्फ़िज्म कहलाती है। 
जॉन सी. रेनाल्ड्स ने औपचारिक रूप से पोलिमोर्फ़िज्मकी इस धारणा को लेम्बडा केलकुलस के विस्तार के रूप में विकसित किया 
ऑब्जेक्ट ओरियनटेड प्रोग्रामिंग में, तदर्थ पोलिमोर्फ़िज्म प्रकार सिद्धांत में एक अवधारणा है जिसमें नाम कई भिन्न प्रकारों के उदाहरणों को व्यक्त कर सकते हैं, जब तक वे किसी सामान्य सुपर वर्ग से सम्बंधित हैं। तदर्थ पोलिमोर्फ़िज्म आमतौर पर सबटाइपिंग के माध्यम से समर्थन प्राप्त करती है, जैसे भिन्न प्रकार के ऑब्जेक्ट किसी अन्य प्रकार के ऑब्जेक्ट ) के लिए पूरी तरह से प्रतिस्थापन योग्य होते हैं और इस प्रकार से इन्हें सामान्य इंटरफेस के माध्यम से हेंडल किया जा सकता है। 
तदर्थ पोलिमोर्फ़िज्म फंक्शन और विधि ओवरलोडिंग का प्रयोग करते हुए कई भाषाओँ में भी समर्थन प्राप्त करती है।
पैरामीट्रिक पोलिमोर्फ़िज्म को सांख्यिकीय रूप से टाइप की गयी कार्यात्मक प्रोग्रामिंग भाषा से भी व्यापक समर्थन प्राप्त होता है। 
ऑब्जेक्ट ओरियनटेड प्रोग्रामिंग समुदाय में पैरामीट्रिक पोलिमोर्फ़िज्मका उपयोग करने वाली प्रोग्रामिंग अक्सर जिनेरिक प्रोग्रामिंग कहलाती है।
पैरामीट्रिक पोलिमोर्फ़िज्मएक भाषा को अधिक अभिव्यक्तिपूर्ण बनाने का एक तरीका है, जबकि फिर भी यह पूर्ण सांख्यिकीय प्रकार-सुरक्षा को बनाये रखता है। 
{0{1}}पैरामीट्रिक पोलिमोर्फ़िज्मका उपयोग करते हुए, एक फंक्शन या डेटा प्रकार को जिनेरिक रूप से लिखा जा सकता है ताकि वह मान के प्रकार पर निर्भर न करते हुए, मान को समान रूप से हेंडल कर सके.
उदाहरण के लिए, एक फंक्शन अपेण्ड जो दो सूचियों को जोड़ता है, उसका निर्माण इस तरीके से किया जा सकता है कि इसे तत्व के प्रकार से कोई फर्क नहीं पड़ता: यह पुर्णान्कों की सूची को, वास्तविक संख्याओं की सूची को, श्रृंखला की सूची को और इस प्रकार से कई अन्य सूचियों को संलग्न कर सकता है। माना कि इस सूची में प्रकार चर a तत्व के प्रकार को निरुपित करता है।
तब अपेण्ड को × → रूप में टाइप किया जा सकता है, जहां प्रकार a के तत्वों की सूची को निरुपित करता है। 
हम कहते हैं कि अपेण्ड का प्रकार a के सभी मानों के लिए a के द्वारा पैरामिट्रीकृत होता है। हर स्थान के लिए जहां अपेण्ड लागू किया जाता है, a के लिए एक मान को निर्धारित किया जाता है।
पैरामीट्रिक पोलिमोर्फ़िज्मको सबसे पहले 1976 में ML में प्रोग्रामिंग भाषाओँ के लिए शुरू किया गया। 
वर्तमान में यह स्टैण्डर्ड ML, OCaml, Ada, Haskell, C++, विजुअल प्रोलोग और अन्य में मौजूद है। जावा, C#, Visual Basic .NET और डेल्फी में से प्रत्येक ने हाल ही में पैरामीट्रिक पोलिमोर्फ़िज्मके लिए "जेनेरिक्स" की शुरुआत की है। 
पोलिमोर्फ़िज्मका सबसे सामान्य रूप "उच्च श्रेणी की इमप्रेडीकेटिव पोलिमोर्फ़िज्म " है।
इस रूप के दो लोकप्रिय प्रतिबन्ध हैं प्रतिबंधित रैंक पोलिमोर्फ़िज्म ) और प्रेडीकेटिव पोलिमोर्फ़िज्म .
साथ ही, ये प्रतिबन्ध "प्रेडीकेटिव प्रिनेक्स पोलिमोर्फ़िज्म " देते हैं, जो आवश्यक रूप से ML और हास्केल के प्रारंभिक संस्करणों में पायी जाने वाली पोलिमोर्फ़िज्मका रूप है। 
एक प्रिनेक्स बहुरूपी प्रणाली में, प्रकार चर को बहुरूपी प्रकार से instantiated नहीं किया जा सकता है। यह "ML-शैली " या "लेट-पोलिमोर्फ़िज्म " के बहुत समान है होते है).
यह प्रतिबंध बहुरूपी और गैर बहुरूपी प्रकारों के बीच विभेद को बहुत महत्वपूर्ण बनाता है; इस प्रकार से प्रेडीकेटिव प्रणालियों में बहुरूपी प्रकार को सामान्य प्रकार से विभेदित करने के लिए कभी कभी टाइप स्कीमाज के रूप में संदर्भित किया जाता है, इन एकरूपी प्रकारों को कभी कभी मोनोटाइप कहा जाता है। 
एक परिणाम यह है कि सभी प्रकारों को एक रूप में लिखा जा सकता है, जो सभी क्वान्टीफायर्स को सबसे बाहरी स्थिति में रखता है। 
उदाहरण के लिए, ऊपर वर्णित अपेण्ड फंक्शन पर विचार करें, जिसमें प्रकार × → है; इस फंक्शन को सूची के एक युग्म पर लागू करने के लिए, एक प्रकार को फंक्शन के प्रकार में चर a के लिए इस प्रकार से प्रतिस्थापित किया जाना चाहिए, तर्क का प्रकार परिणामी फंक्शन प्रकार से मेल खाए.एक इमप्रेडीकेटिव प्रणाली में, प्रतिस्थापित किया जाने वाला प्रकार कोई भी ऐसा प्रकार हो सकता है, जिसमें एक ऐसा प्रकार शामिल हो जो खुद बहुरूपी हो; इस प्रकार से अपेण्ड को किसी भी प्रकार के तत्वों से युक्त सूची के युग्म पर लागू किया जा सकता है-- यहां तक कि बहुरूपी फंक्शन की सूची जैसे खुद अपेण्ड पर भी लागू किया जा सकता है। 
भाषा ML और इसके निकट सम्बन्धियों में पोलिमोर्फ़िज्मप्रेडीकेटिव है। इसका कारण यह है कि प्रेडीकेटिवीटी, अन्य प्रतिबंधों के साथ, प्रकार प्रणाली को इतना साधारण बनाती है कि प्रकार निष्कर्ष संभव हो जाता है। भाषाओं में जहां बहुरूपी फंक्शन को लागू करते समय स्पष्ट प्रकार के एनोटेशन आवश्यक हैं प्रेडीकेटिवीटी प्रतिबन्ध कम महत्वपूर्ण हैं; इस प्रकार से ये भाषाएं सामान्यतया इम प्रेडीकेटिव होती हैं। हास्केल प्रेडीकेटिवीटी के बिना लेकिन कुछ जटिलताओं के साथ प्रकार निष्कर्ष प्राप्त कर लेता है। 
k के किसी निश्चित मान के लिए, रैंक-k पोलिमोर्फ़िज्मएक प्रणाली है जिसमें एक क्वान्टीफायर k एरो से अधिक के बायीं और प्रकट नहीं हो सकता .
रैंक-2 पोलिमोर्फ़िज्मके लिए प्रकार पुनर्निमाण को निर्धारित किया जा सकता है, लेकिन रैंक-3 और उपरोक्त का पुनर्निमाण नहीं किया जा सकता है। 

रैंक-n पोलिमोर्फ़िज्मएक ऐसी पोलिमोर्फ़िज्महै जिसमें क्वान्टी फायर्स कई याद्रीचछिक एरो के बायीं और प्रकट होते हैं। 
एक प्रेडीकेटिव पैरामीट्रिक बहुरूपी प्रणाली में, एक प्रकार चर   α  {\displaystyle \alpha } \alpha से युक्त एक प्रकार   τ  {\displaystyle \tau } \tau का प्रयोग इस तरीके से नहीं किया जा सकता है कि   α  {\displaystyle \alpha } \alpha एक बहुरूपी प्रकार के लिए इन्स टेनीटिएट हो सके. 
इसे प्रथम श्रेणी की पोलिमोर्फ़िज्मकहा जाता है। इमप्रेडीकेटिव बहुरूपता, बहुरूपी प्रकार जैसे खुद   τ  {\displaystyle \tau } \tau सहित किसी भी प्रकार से एक प्रकार   τ  {\displaystyle \tau } \tau में एक चर के इन्सटेनटिएशन में मदद करता है। 
प्रकार सिद्धांत में, सबसे ज्यादा अध्ययन किये जाने वाले इमप्रेडीकेटिव प्रकार λ-केल्कुली लेम्बडा घन विशेष रूप से प्रणाली एफ पर आधारित हैं। प्रेडी केटिव प्रकार सिद्धांतों में मार्टिन-Löf प्रकार सिद्धांत और NuPRL शामिल हैं।
कार्डेली और वेगनर ने प्रकार पेरामीटर पर बन्ध की अनुमति के लाभों को 1985 में पहचाना. कई गतिविधियों के लिए डेटा प्रकार के कुछ ज्ञान की जरुरत होती है, लेकिन ये फिर भी पैरामीट्रिक रूप से काम कर सकते हैं। 
उदाहरण के लिए, एक आइटम एक सूची में शामिल किया गया है या नहीं, इसकी जांच के लिए, हमें समानता के लिए आइटमों की तुलना करनी होती है। मानक ML में, रूप ’’a के प्रकार पैरामीटर प्रतिबंधित होते हैं जिससे समानता की क्रियाविधि उपलब्ध हो जाती है, इस प्रकार से फंक्शन में प्रकार ’’a × ’’a list → bool होगा और ’’a केवल परिभषित समानता से युक्त एक प्रकार हो सकता है।हास्केल में, बंधन की प्राप्ति एक प्रकार वर्ग से सम्बंधित करने के लिए आवश्यक प्रकारों के द्वारा होती है; इस प्रकार से हास्केल में समान फंक्शन में प्रकार    E q α ⇒ α →  → B o o l   {\displaystyle {\scriptstyle Eq\,\alpha \,\Rightarrow \alpha \,\rightarrow \left\rightarrow Bool}} {\scriptstyle Eq \, \alpha \, \Rightarrow \alpha \, \rightarrow \left \rightarrow Bool} होता है। अधिकांश ऑब्जेक्ट ओरियनटेड प्रोग्रामिंग भाषायें, जो पैरामीट्रिक पोलिमोर्फ़िज्मका समर्थन करती हैं, उनमें पैरामीटर्स को एक दिए गए प्रकार के सबटाइप बनने के लिए विवश किया जा सकता है। 
कुछ भाषायें उन प्रकारों की रेंज को प्रतिबंधित करने के लिए सबटाइप के विचार उपलब्ध कराती हैं, जिनका उपयोग पैरामीट्रिक पोलिमोर्फ़िज्मके एक विशेष मामले में किया जा सकता है। इन भाषाओं में, सबटाइपिंग पोलिमोर्फ़िज्म  कहा जाता है), एक विशेष प्रकार T के ऑब्जेक्ट को लेने के लिए एक फंक्शन को लिखने में मदद करती है, लेकिन ठीक प्रकार से कार्य भी करती है यदि प्रकार S से सम्बंधित ऑब्जेक्ट को पास किया जाये जो T का सबटाइप है .इस प्रकार के सम्बन्ध को कभी कभी S S के रूप में लिखा जाता है। 
उदाहरण के लिए, यदि संख्या, अनुपातिक और पूर्णांक ऐसे प्रकार हैं कि संख्या :> अनुपातिक और संख्या :> पूर्णांक, एक संख्या के लिए लिखा गया फंक्शन उतने ही अच्छे प्रकार से कार्य करेगा जितना कि तब जब एक संख्या को पास करने की तरह एक पूर्णांक या अनुपातिक को पास किया जाये. ऑब्जेक्ट के वास्तविक प्रकार को ग्राहक से छुपा कर एक ब्लैक बॉक्स में डाला जा सकता है और यह ऑब्जेक्ट आइडेंटीटी के द्वारा उपलब्ध होता है। 
वास्तव में, यदि संख्या का प्रकार एबस्ट्रेक्ट है, यह असंभव हो सकता है कि आप अपने हाथ हो उस ऑब्जेक्ट पर रख पायें जिसका सर्वाधिक-व्युत्पन्न प्रकार संख्या है .
ऑब्जेक्ट ओरियनटेड प्रोग्रामिंग भाषायें उपवर्गों का उपयोग करते हुए सब टाइपिंग पोलिमोर्फ़िज्मपेश करती हैं। प्रारूपिक क्रियान्वयन में, प्रत्येक वर्ग में एक वर्चुअल टेबल शामिल होती है-यह फंक्शनों की एक टेबल है जो वर्ग इंटरफेस के बहुरूपी हिस्से को क्रियान्वित करती है-और प्रत्येक ऑब्जेक्ट में इसके वर्ग के "वी टेबल " के लिए एक पोइनटर शामिल होता है, इसका उपयोग तब किया जाता है जब कभी बहुरूपी विधि का उपयोग किया जाता है। यह प्रणाली निम्न का एक उदाहरण है:
वही अधिकांश अन्य लोकप्रिय ऑब्जेक्ट प्रणालियों के लिए चला जाता है। कुछ, बहरहाल, जैसे CLOS एकाधिक प्रेषण उपलब्ध कराते हैं, जिसके तहत विधि कॉल सभी तर्कों में बहुरूपी होते हैं। 
स्ट्रेची ने शब्द तदर्थ पोलिमोर्फ़िज्म का चयन उन बहुरूपी फंक्शनों के सन्दर्भ में किया जिन्हें भिन्न प्रकार के तर्कों पर लागू किया जा सकता है, लेकिन जो उस तर्क के आधार पर भिन्न प्रकार से व्यवहार करते हैं, जिनके लिए उन्हें लागू किया जाता है . शब्द "तदर्थ " इस अर्थ में अपमानजनक नहीं माना जा सकता है; यह साधारण रूप से इस तथ्य से सम्बंधित है कि पोलिमोर्फ़िज्मका प्रकार, प्रकार प्रणाली का एक मूल गुण नहीं है। 
तदर्थ पोलिमोर्फ़िज्म एक प्रेषण प्रणाली है: एक नाम से युक्त फंक्शन के माध्यम से गति के नियंत्रण को कई अन्य फंक्शनों तक प्रेषित किया जाता है, जिसके लिए कॉल किये जाने वाले सटीक फंक्शन को निर्दिष्ट करने की जरुरत नहीं होती है। ओवरलोडिंग, समान नाम से परिभाषित किये जाने वाले भिन्न प्रकारों को लेने में एकाधिक फंक्शनों की मदद करती है; कम्पाइलर या इन्टरप्रेटर स्वतः ही सही वाले को कॉल करता है। इस तरह, फंक्शनों को अपेण्ड करने वाली पूर्णांकों की सूची, वास्तविक संख्याओं की सूची और इस प्रकार की सूचियों को लिखा जा सकता है और सभी अपेण्ड कहलाते हैं- और सही अपेण्ड फंक्शन को संलग्न किये जाने वाले प्रकार के आधार पर नाम दिया जायेगा. यह पैरामीट्रिक पोलिमोर्फ़िज्मसे अलग है जिसमें फंक्शनों को जिनेरिक रूप से लिखा जाना चाहिए, ताकि सूची के किसी भी प्रकार के साथ कार्य किया जा सके. ओवरलोडिंग का उपयोग करते हुए, एक ऐसा फंक्शन प्राप्त करना संभव है जो इसे पास किये जाने वाले इनपुट के प्रकार के आधार पर दो पूर्णतया भिन्न चीजों को कर सके; यह पैरामीट्रिक पोलिमोर्फ़िज्मके साथ संभव नहीं है।ओवरलोडिंग को देखने का एक और तरीका है कि एक रूटीन को अद्वितीय रूप से इसके नाम से नहीं पहचाना जाता, बल्कि इसके नाम और संख्या, इसके पैरामीटर्स के प्रकार और क्रम के संयोजन द्वारा पहचाना जाता है। 
पोलिमोर्फ़िज्मका यह प्रकार ऑब्जेक्ट-ओरियनटेड प्रोग्रामिंग भाषा में आम है, जिनमें से कई ओपरेटर को फंक्शन के समान तरीके से ओवरलोड होने की अनुमति देते हैं .कुछ भाषायें जो गतिक रूप से टाइप नहीं की जाती हैं और उनमें तदर्थ पोलिमोर्फ़िज्म की कमी होती है, उनमें फंक्शन के नाम लम्बे होते हैं जैसे print_int, print_string, आदि. इसे किसी के दृष्टिकोण के आधार पर लाभ या हानि के रूप में देखा जा सकता है। 
एक फायदा जो कभी कभी ओवरलोडिंग से होता है वह है विशिष्टीकरण का स्वरुप, उदाहरण, एक समान नाम से युक्त फंक्शन को कई अलग अलग तरीकों से क्रियान्वित किया जा सकता है, इनमें से प्रत्येक विशिष्ट डेटा प्रकार के लिए अनुकूलित होता है, जिस पर यह कार्य करता है। यह उस कोड के लिए एक सुविधाजनक इंटरफेस उपलब्ध करा सकता है, जिसे प्रदर्शन के कारणों के लिए एकाधिक स्थितियों में विशिष्टीकृत होने की आवश्यकता है। 
क्योंकि ओवरलोडिंग कम्पाइल के समय की जाती है, यह लेट बाइंडिंग के लिए विकल्प नहीं है जैसा कि सबटाइपिंग पोलिमोर्फ़िज्ममें पाया गया है।
पिछले सेक्शन में बताये गए तरीकों के अलावा, ऐसे और भी तरीकें हैं जिनमें तदर्थ पोलिमोर्फ़िज्मकाम कर सकती है। 
यह प्रोग्राम के संकलन के बाद रनटाइम पर होता है। इसलिए, पोलिमोर्फ़िज्मअन्य भाषाओँ की तरह सब टाइपिंग पोलिमोर्फ़िज्मके द्वारा दी गयी है और इसे रन टाइम पर तदर्थ पोलिमोर्फ़िज्मके द्वारा कार्यक्षमता में विस्तृत भी किया जाता है। 
लेकिन निकट से देखने पर यह भी पता चलेगा कि स्मॉल टाक तदर्थ पोलिमोर्फ़िज्मकी एक अलग किस्म उपलब्ध करता है। चूंकि स्मॉल टाक में एक देर से बंधित होने वाला क्रियान्वयन मॉडल है और चूंकि यह ओब्जेक्ट्स को उन संदेशों को हेंडल करने की क्षमता देता है जिन्हें समझा नहीं जाता है, एक विशेष सन्देश को स्पष्ट रूप से ओवरलोड किये बिना पोलिमोर्फ़िज्मका उपयोग करते हुए क्रियाशीलता का संपादन करना और आगे बढ़ना संभव है। संभवतया दैनिक प्रोग्रामिंग के लिए आमतौर पर इसकी सलाह नहीं दी जाती है, लेकिन प्रोक्सीज के क्रियावयन के समय यह बहुत उपयोगी हो सकती है। 
इसके अलावा, जहां एक ओर सामान्य शब्दों में आम वर्ग की विधियों ओर निर्माता ओवरलोडिंग को पोलिमोर्फ़िज्मनहीं माना जाता है, अधिक समतल भाषायें भी हैं, जिनमें वर्ग नियमित ओब्जेक्ट्स हैं। स्मॉल टाक में, उदाहरण के लिए, वर्ग नियमित ओब्जेक्ट्स हैं। बदले में, इसका अर्थ है वर्गों को भेजा गया सन्देश अतिभारित किया जा सकता है और ऐसे ओब्जेक्ट्स बनाना भी संभव है जो वर्गों के पदानुक्रम से अपने वर्ग प्राप्त किये बिना वर्गों की तरह व्यवहार करें. ये प्रभावी तकनीकें हैं जिनका उपयोग स्मॉल टाक की शक्तिशाली प्रतिबिम्ब क्षमताओं का लाभ उठाने के लिए किया जा सकता है। 
इसी प्रकार की व्यवस्थायें सेल्फ और न्यूस्पीक जैसी भाषाओँ में भी संभव हैं। 
इस उदाहरण का लक्ष्य है इस लेख में वर्णित तीन भिन्न प्रकार की पोलिमोर्फ़िज्मका उदाहरण देना. हालांकि ओवरलोडिंग मूल रूप से एक अंकगणितीय ऑपरेटर है जो कई प्रकार के काम करता है, इस प्रकार से यह सबसे स्पष्ट उदाहरण नहीं हो सकता है, यह कुछ सूक्ष्म बिंदु प्रस्तुत करता है। व्यवहार में, पोलिमोर्फ़िज्मके विभिन्न प्रकारों को आम तौर पर उस तरह से मिश्रित नहीं किया जाता है जितना कि यहां किया गया है।
एक ऑपरेटर की कल्पना करें + जिसे निम्न तरीकों से काम में लिया जा सकता है:
इन छह फंक्शन कॉल्स को हेंडल करने के लिए, कोड के चार अलग टुकडों की जरुरत होती है- या तीन की यदि श्रृंखलाओं को अक्षरों की सूची माना गया हो. 
इस प्रकार, नाम + वास्तव में तीन या चार पूर्णतया अलग फंक्शन्स से सन्दर्भ रखता है। यह ओवरलोडिंग का एक उदाहरण है।
