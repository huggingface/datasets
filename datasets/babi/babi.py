# coding=utf-8
# Copyright 2020 The HuggingFace Datasets Authors and the current dataset script contributor.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
""" The 20 QA tasks of the bAbI project for testing text understanding and reasoning."""

from __future__ import absolute_import, division, print_function

import os
import re
from dataclasses import dataclass

import datasets


_CITATION = """\
@misc{weston2015aicomplete,
      title={Towards AI-Complete Question Answering: A Set of Prerequisite Toy Tasks},
      author={Jason Weston and Antoine Bordes and Sumit Chopra and Alexander M. Rush and Bart van MerriÃ«nboer and Armand Joulin and Tomas Mikolov},
      year={2015},
      eprint={1502.05698},
      archivePrefix={arXiv},
      primaryClass={cs.AI}
}
@misc{sukhbaatar2015endtoend,
      title={End-To-End Memory Networks},
      author={Sainbayar Sukhbaatar and Arthur Szlam and Jason Weston and Rob Fergus},
      year={2015},
      eprint={1503.08895},
      archivePrefix={arXiv},
      primaryClass={cs.NE}
}
"""

_DESCRIPTION = """\
The 20 bAbI tasks are the first set of 20 tasks for testing text understanding and reasoning in the bAbI project.
These tasks are designed to measure understanding in several ways:
whether a system is able to answer questions via chaining facts, simple induction, deduction and many more.
The tasks are designed to be prerequisites for any system that aims to be capable of conversing with a human.
The aim is that each task tests a unique aspect of text and reasoning, and hence test different capabilities of learning models.

We use the data version generated by the ParlAI project at https://github.com/facebookresearch/ParlAI
Similarly to the ParlAI preprocessing you can set `replace_comma=True` in load_dataset to replace comma by spaces in list of answers.
(see https://github.com/facebookresearch/ParlAI/blob/748c5fd04975dab3e1ce9ed6bf0889ac80339d53/parlai/tasks/babi/agents.py#L25)
"""

_URL = "http://parl.ai/downloads/babi/babi.tar.gz"


@dataclass
class bAbIConfig(datasets.BuilderConfig):
    """ We add the task and number of examples to the standard builder for easy access in the creation method"""

    task: int = 1
    examples: int = 1
    replace_comma: bool = False


class BABI(datasets.GeneratorBasedBuilder):
    """ The 20 QA tasks of the bAbI project for testing text understanding and reasoning."""

    VERSION = datasets.Version("1.1.0")

    # This is an example of a dataset with multiple configurations.
    # If you don't want/need to define several sub-sets in your dataset,
    # just remove the BUILDER_CONFIG_CLASS and the BUILDER_CONFIGS attributes.

    # If you need to make complex sub-parts in the datasets with configurable options
    # You can create your own builder configuration class to store attribute, inheriting from datasets.BuilderConfig
    BUILDER_CONFIG_CLASS = bAbIConfig

    # You will be able to load one or the other configurations in the following list with
    # data = datasets.load_dataset('my_dataset', 'first_domain')
    # data = datasets.load_dataset('my_dataset', 'second_domain')
    BUILDER_CONFIGS = [
        bAbIConfig(
            name=f"task_{t+1}_with_{n}k_examples",
            description=f"This is the task {t+1} of bAbI with {n}k examples",
            task=t + 1,
            examples=n,
        )
        for t in range(20)
        for n in [1, 10]
    ]

    def _info(self):
        # TODO: This method pecifies the datasets.DatasetInfo object which contains informations and typings for the dataset
        return datasets.DatasetInfo(
            # This is the description that will appear on the datasets page.
            description=_DESCRIPTION,
            # This defines the different columns of the dataset and their types
            features=datasets.Features(
                {
                    "ID": datasets.Value("int32"),
                    "text": datasets.Value("string"),
                    "answer": datasets.Value("string"),
                    "is_question": datasets.Value("bool"),
                    "story_id": datasets.Value("int32"),
                }
            ),
            # If there's a common (input, target) tuple from the features,
            # specify them here. They'll be used if as_supervised=True in
            # builder.as_dataset.
            supervised_keys=None,
            # Homepage of the dataset for documentation
            homepage="https://research.fb.com/downloads/babi/",
            citation=_CITATION,
        )

    def _split_generators(self, dl_manager):
        """Returns SplitGenerators."""
        # TODO: This method is tasked with downloading/extracting the data and defining the splits depending on the configuration
        # If several configurations are possible (listed in BUILDER_CONFIGS), the configuration selected by the user is in self.config.name

        # dl_manager is a datasets.download.DownloadManager that can be used to download and extract URLs
        # It can accept any type or nested list/dict and will give back the same structure with the url replaced with path to local files.
        # By default the archives will be extracted and a path to a cached folder where they are extracted is returned instead of the archive
        data_dir = dl_manager.download_and_extract(_URL)
        exsz = "-10k" if self.config.examples == 10 else ""
        task = self.config.task
        data_dir = os.path.join(data_dir, "tasks_1-20_v1-2", f"en-valid{exsz}-nosf")
        return [
            datasets.SplitGenerator(
                name=datasets.Split.TRAIN,
                # These kwargs will be passed to _generate_examples
                gen_kwargs={
                    "filepath": os.path.join(data_dir, f"qa{task}_train.txt"),
                },
            ),
            datasets.SplitGenerator(
                name=datasets.Split.TEST,
                # These kwargs will be passed to _generate_examples
                gen_kwargs={
                    "filepath": os.path.join(data_dir, f"qa{task}_test.txt"),
                },
            ),
            datasets.SplitGenerator(
                name=datasets.Split.VALIDATION,
                # These kwargs will be passed to _generate_examples
                gen_kwargs={
                    "filepath": os.path.join(data_dir, f"qa{task}_valid.txt"),
                },
            ),
        ]

    def _generate_examples(self, filepath):
        """ Yields examples. """
        pattern = re.compile(r"(\d+)\s([^\t]+)\t?(.*)?")
        with open(filepath, encoding="utf-8") as f:
            data = f.read().splitlines()
            story_id = 0
            current_id = 0
            for id_, row in enumerate(data):
                m = pattern.match(row)
                new_id = int(m.group(1))
                if new_id < current_id:
                    story_id += 1

                current_id = new_id

                if m.group(3) and self.config.replace_comma and self.config.task in [8, 19]:
                    answers = m.group(3).replace(",", " ")
                else:
                    answers = m.group(3)

                yield id_, {
                    "ID": current_id,
                    "text": m.group(2),
                    "answer": answers,
                    "is_question": bool(m.group(3)),
                    "story_id": story_id,
                }
