# coding=utf-8
# Copyright 2020 The HuggingFace Datasets Authors and the current dataset script contributor.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
""" SQA (Sequential Question Answering) by Microsoft. """

from __future__ import absolute_import, division, print_function

import ast
import os
from typing import Dict

import pandas as pd
import pyarrow as pa

import datasets


_CITATION = """\
@InProceedings{iyyer2017search-based,
author = {Iyyer, Mohit and Yih, Scott Wen-tau and Chang, Ming-Wei},
title = {Search-based Neural Structured Learning for Sequential Question Answering},
booktitle = {Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics},
year = {2017},
month = {July},
abstract = {Recent work in semantic parsing for question answering has focused on long and complicated questions, many of which would seem unnatural if asked in a normal conversation between two humans. In an effort to explore a conversational QA setting, we present a more realistic task: answering sequences of simple but inter-related questions. We collect a dataset of 6,066 question sequences that inquire about semi-structured tables from Wikipedia, with 17,553 question-answer pairs in total. To solve this sequential question answering task, we propose a novel dynamic neural semantic parsing framework trained using a weakly supervised reward-guided search. Our model effectively leverages the sequential context to outperform state-of-the-art QA systems that are designed to answer highly complex questions.},
publisher = {Association for Computational Linguistics},
url = {https://www.microsoft.com/en-us/research/publication/search-based-neural-structured-learning-sequential-question-answering/},
}
"""

_DESCRIPTION = """\
The SQA dataset was created to explore the task of answering sequences of inter-related questions on HTML tables.
It has 6,066 question sequences that inquire about semi-structured tables from Wikipedia, with 17,553 question-answer pairs in total.

- Raw semi-structured tables are accessible using the configurations starting with "csv_".
- Dataset with question-answer pairs are accessible with the other configurations:

"""

_URL = "https://download.microsoft.com/download/1/D/C/1DC270D2-1B53-4A61-A2E3-88AB3E4E6E1F/SQA%20Release%201.0.zip"

CSV_LIST = [
    "200_12",
    "200_14",
    "200_18",
    "200_22",
    "200_25",
    "200_28",
    "200_3",
    "200_30",
    "200_33",
    "200_35",
    "200_4",
    "200_45",
    "200_47",
    "200_7",
    "200_9",
    "201_1",
    "201_10",
    "201_11",
    "201_14",
    "201_17",
    "201_19",
    "201_2",
    "201_20",
    "201_21",
    "201_25",
    "201_28",
    "201_29",
    "201_42",
    "201_46",
    "201_47",
    "201_8",
    "202_114",
    "202_119",
    "202_122",
    "202_126",
    "202_143",
    "202_157",
    "202_161",
    "202_168",
    "202_175",
    "202_180",
    "202_196",
    "202_198",
    "202_200",
    "202_202",
    "202_217",
    "202_223",
    "202_224",
    "202_226",
    "202_231",
    "202_232",
    "202_244",
    "202_248",
    "202_253",
    "202_258",
    "202_264",
    "202_273",
    "202_281",
    "202_283",
    "202_285",
    "202_44",
    "202_54",
    "202_66",
    "202_7",
    "202_75",
    "202_78",
    "202_79",
    "202_85",
    "202_86",
    "202_87",
    "202_93",
    "203_0",
    "203_1",
    "203_10",
    "203_100",
    "203_102",
    "203_103",
    "203_105",
    "203_107",
    "203_108",
    "203_112",
    "203_113",
    "203_114",
    "203_116",
    "203_125",
    "203_126",
    "203_129",
    "203_131",
    "203_134",
    "203_135",
    "203_137",
    "203_14",
    "203_140",
    "203_141",
    "203_142",
    "203_145",
    "203_148",
    "203_149",
    "203_150",
    "203_151",
    "203_153",
    "203_154",
    "203_155",
    "203_156",
    "203_158",
    "203_159",
    "203_160",
    "203_162",
    "203_164",
    "203_166",
    "203_169",
    "203_171",
    "203_172",
    "203_173",
    "203_174",
    "203_175",
    "203_177",
    "203_178",
    "203_179",
    "203_183",
    "203_185",
    "203_187",
    "203_188",
    "203_189",
    "203_190",
    "203_193",
    "203_195",
    "203_196",
    "203_197",
    "203_199",
    "203_20",
    "203_201",
    "203_202",
    "203_203",
    "203_208",
    "203_21",
    "203_211",
    "203_212",
    "203_215",
    "203_217",
    "203_219",
    "203_22",
    "203_220",
    "203_222",
    "203_223",
    "203_226",
    "203_229",
    "203_23",
    "203_230",
    "203_231",
    "203_233",
    "203_234",
    "203_235",
    "203_236",
    "203_237",
    "203_238",
    "203_24",
    "203_240",
    "203_243",
    "203_245",
    "203_246",
    "203_251",
    "203_253",
    "203_254",
    "203_257",
    "203_259",
    "203_260",
    "203_266",
    "203_267",
    "203_27",
    "203_271",
    "203_272",
    "203_273",
    "203_274",
    "203_275",
    "203_276",
    "203_277",
    "203_278",
    "203_280",
    "203_283",
    "203_284",
    "203_286",
    "203_287",
    "203_289",
    "203_290",
    "203_291",
    "203_30",
    "203_303",
    "203_305",
    "203_308",
    "203_31",
    "203_313",
    "203_314",
    "203_318",
    "203_32",
    "203_320",
    "203_322",
    "203_324",
    "203_325",
    "203_327",
    "203_33",
    "203_330",
    "203_331",
    "203_333",
    "203_334",
    "203_338",
    "203_340",
    "203_341",
    "203_343",
    "203_345",
    "203_346",
    "203_349",
    "203_350",
    "203_351",
    "203_353",
    "203_354",
    "203_355",
    "203_358",
    "203_36",
    "203_360",
    "203_361",
    "203_362",
    "203_364",
    "203_370",
    "203_371",
    "203_372",
    "203_373",
    "203_374",
    "203_375",
    "203_376",
    "203_377",
    "203_38",
    "203_384",
    "203_385",
    "203_386",
    "203_387",
    "203_388",
    "203_39",
    "203_390",
    "203_396",
    "203_399",
    "203_400",
    "203_402",
    "203_403",
    "203_41",
    "203_410",
    "203_412",
    "203_414",
    "203_415",
    "203_416",
    "203_418",
    "203_42",
    "203_423",
    "203_427",
    "203_429",
    "203_430",
    "203_435",
    "203_437",
    "203_439",
    "203_44",
    "203_441",
    "203_446",
    "203_448",
    "203_449",
    "203_452",
    "203_455",
    "203_456",
    "203_457",
    "203_459",
    "203_463",
    "203_465",
    "203_466",
    "203_467",
    "203_468",
    "203_475",
    "203_476",
    "203_478",
    "203_479",
    "203_48",
    "203_481",
    "203_483",
    "203_485",
    "203_486",
    "203_489",
    "203_490",
    "203_492",
    "203_494",
    "203_497",
    "203_499",
    "203_5",
    "203_502",
    "203_503",
    "203_504",
    "203_506",
    "203_515",
    "203_518",
    "203_519",
    "203_52",
    "203_522",
    "203_523",
    "203_524",
    "203_525",
    "203_527",
    "203_533",
    "203_538",
    "203_540",
    "203_543",
    "203_544",
    "203_547",
    "203_548",
    "203_549",
    "203_55",
    "203_552",
    "203_553",
    "203_555",
    "203_556",
    "203_557",
    "203_558",
    "203_559",
    "203_56",
    "203_561",
    "203_562",
    "203_564",
    "203_566",
    "203_567",
    "203_570",
    "203_571",
    "203_574",
    "203_576",
    "203_578",
    "203_581",
    "203_583",
    "203_585",
    "203_586",
    "203_588",
    "203_590",
    "203_591",
    "203_592",
    "203_593",
    "203_594",
    "203_598",
    "203_600",
    "203_602",
    "203_603",
    "203_604",
    "203_605",
    "203_608",
    "203_61",
    "203_611",
    "203_612",
    "203_617",
    "203_618",
    "203_619",
    "203_620",
    "203_622",
    "203_623",
    "203_624",
    "203_626",
    "203_629",
    "203_633",
    "203_637",
    "203_638",
    "203_64",
    "203_640",
    "203_641",
    "203_644",
    "203_645",
    "203_653",
    "203_654",
    "203_655",
    "203_659",
    "203_66",
    "203_664",
    "203_665",
    "203_666",
    "203_67",
    "203_670",
    "203_671",
    "203_672",
    "203_673",
    "203_674",
    "203_676",
    "203_677",
    "203_678",
    "203_680",
    "203_684",
    "203_688",
    "203_691",
    "203_694",
    "203_695",
    "203_699",
    "203_701",
    "203_707",
    "203_711",
    "203_712",
    "203_713",
    "203_715",
    "203_716",
    "203_720",
    "203_721",
    "203_722",
    "203_727",
    "203_729",
    "203_731",
    "203_733",
    "203_734",
    "203_74",
    "203_740",
    "203_748",
    "203_751",
    "203_752",
    "203_754",
    "203_755",
    "203_759",
    "203_760",
    "203_763",
    "203_769",
    "203_77",
    "203_770",
    "203_771",
    "203_773",
    "203_774",
    "203_775",
    "203_776",
    "203_777",
    "203_78",
    "203_780",
    "203_783",
    "203_785",
    "203_786",
    "203_789",
    "203_790",
    "203_791",
    "203_798",
    "203_8",
    "203_802",
    "203_803",
    "203_804",
    "203_805",
    "203_809",
    "203_811",
    "203_812",
    "203_815",
    "203_818",
    "203_820",
    "203_821",
    "203_823",
    "203_824",
    "203_826",
    "203_829",
    "203_831",
    "203_835",
    "203_836",
    "203_837",
    "203_839",
    "203_84",
    "203_841",
    "203_843",
    "203_845",
    "203_849",
    "203_855",
    "203_86",
    "203_862",
    "203_865",
    "203_866",
    "203_873",
    "203_874",
    "203_875",
    "203_88",
    "203_90",
    "203_93",
    "203_94",
    "203_96",
    "204_1",
    "204_10",
    "204_102",
    "204_103",
    "204_105",
    "204_106",
    "204_107",
    "204_109",
    "204_11",
    "204_111",
    "204_113",
    "204_114",
    "204_116",
    "204_119",
    "204_123",
    "204_124",
    "204_125",
    "204_128",
    "204_129",
    "204_13",
    "204_132",
    "204_133",
    "204_135",
    "204_136",
    "204_139",
    "204_140",
    "204_142",
    "204_144",
    "204_146",
    "204_149",
    "204_152",
    "204_154",
    "204_155",
    "204_159",
    "204_160",
    "204_162",
    "204_163",
    "204_164",
    "204_165",
    "204_167",
    "204_169",
    "204_17",
    "204_170",
    "204_172",
    "204_174",
    "204_180",
    "204_181",
    "204_183",
    "204_185",
    "204_186",
    "204_187",
    "204_188",
    "204_189",
    "204_19",
    "204_190",
    "204_195",
    "204_197",
    "204_198",
    "204_199",
    "204_2",
    "204_20",
    "204_202",
    "204_204",
    "204_207",
    "204_208",
    "204_209",
    "204_211",
    "204_212",
    "204_215",
    "204_216",
    "204_219",
    "204_223",
    "204_224",
    "204_226",
    "204_227",
    "204_228",
    "204_230",
    "204_231",
    "204_232",
    "204_234",
    "204_236",
    "204_237",
    "204_238",
    "204_240",
    "204_241",
    "204_242",
    "204_245",
    "204_246",
    "204_247",
    "204_249",
    "204_25",
    "204_250",
    "204_251",
    "204_254",
    "204_255",
    "204_256",
    "204_257",
    "204_258",
    "204_26",
    "204_260",
    "204_262",
    "204_263",
    "204_264",
    "204_267",
    "204_268",
    "204_27",
    "204_270",
    "204_271",
    "204_274",
    "204_276",
    "204_285",
    "204_286",
    "204_289",
    "204_29",
    "204_291",
    "204_295",
    "204_296",
    "204_297",
    "204_3",
    "204_300",
    "204_301",
    "204_302",
    "204_304",
    "204_306",
    "204_308",
    "204_309",
    "204_31",
    "204_311",
    "204_313",
    "204_320",
    "204_321",
    "204_322",
    "204_325",
    "204_326",
    "204_330",
    "204_332",
    "204_333",
    "204_334",
    "204_336",
    "204_337",
    "204_338",
    "204_34",
    "204_340",
    "204_343",
    "204_344",
    "204_347",
    "204_35",
    "204_350",
    "204_351",
    "204_352",
    "204_354",
    "204_355",
    "204_358",
    "204_359",
    "204_36",
    "204_364",
    "204_366",
    "204_368",
    "204_369",
    "204_370",
    "204_371",
    "204_372",
    "204_374",
    "204_376",
    "204_379",
    "204_38",
    "204_381",
    "204_382",
    "204_384",
    "204_385",
    "204_386",
    "204_390",
    "204_391",
    "204_394",
    "204_395",
    "204_396",
    "204_4",
    "204_401",
    "204_402",
    "204_403",
    "204_404",
    "204_405",
    "204_407",
    "204_409",
    "204_410",
    "204_414",
    "204_415",
    "204_416",
    "204_417",
    "204_42",
    "204_420",
    "204_422",
    "204_423",
    "204_424",
    "204_426",
    "204_433",
    "204_434",
    "204_44",
    "204_442",
    "204_443",
    "204_445",
    "204_446",
    "204_447",
    "204_449",
    "204_455",
    "204_46",
    "204_464",
    "204_468",
    "204_469",
    "204_472",
    "204_473",
    "204_475",
    "204_476",
    "204_477",
    "204_479",
    "204_48",
    "204_482",
    "204_483",
    "204_485",
    "204_487",
    "204_488",
    "204_490",
    "204_491",
    "204_496",
    "204_501",
    "204_503",
    "204_505",
    "204_507",
    "204_508",
    "204_509",
    "204_51",
    "204_510",
    "204_511",
    "204_514",
    "204_515",
    "204_518",
    "204_52",
    "204_521",
    "204_523",
    "204_524",
    "204_526",
    "204_529",
    "204_53",
    "204_530",
    "204_531",
    "204_532",
    "204_533",
    "204_534",
    "204_536",
    "204_537",
    "204_538",
    "204_54",
    "204_541",
    "204_543",
    "204_544",
    "204_546",
    "204_547",
    "204_548",
    "204_552",
    "204_554",
    "204_557",
    "204_559",
    "204_562",
    "204_566",
    "204_567",
    "204_568",
    "204_57",
    "204_571",
    "204_573",
    "204_575",
    "204_576",
    "204_578",
    "204_579",
    "204_581",
    "204_584",
    "204_587",
    "204_589",
    "204_59",
    "204_590",
    "204_591",
    "204_593",
    "204_594",
    "204_595",
    "204_597",
    "204_598",
    "204_599",
    "204_604",
    "204_605",
    "204_61",
    "204_610",
    "204_612",
    "204_614",
    "204_617",
    "204_618",
    "204_619",
    "204_621",
    "204_622",
    "204_624",
    "204_625",
    "204_629",
    "204_630",
    "204_631",
    "204_632",
    "204_633",
    "204_634",
    "204_635",
    "204_64",
    "204_640",
    "204_641",
    "204_643",
    "204_644",
    "204_651",
    "204_653",
    "204_656",
    "204_657",
    "204_659",
    "204_661",
    "204_663",
    "204_665",
    "204_667",
    "204_668",
    "204_67",
    "204_670",
    "204_673",
    "204_679",
    "204_68",
    "204_682",
    "204_684",
    "204_685",
    "204_686",
    "204_688",
    "204_689",
    "204_690",
    "204_691",
    "204_692",
    "204_694",
    "204_695",
    "204_696",
    "204_7",
    "204_701",
    "204_703",
    "204_706",
    "204_707",
    "204_710",
    "204_714",
    "204_715",
    "204_717",
    "204_72",
    "204_720",
    "204_721",
    "204_722",
    "204_725",
    "204_726",
    "204_727",
    "204_728",
    "204_729",
    "204_733",
    "204_735",
    "204_736",
    "204_74",
    "204_740",
    "204_741",
    "204_743",
    "204_744",
    "204_745",
    "204_746",
    "204_749",
    "204_750",
    "204_751",
    "204_752",
    "204_755",
    "204_757",
    "204_758",
    "204_759",
    "204_76",
    "204_761",
    "204_763",
    "204_764",
    "204_765",
    "204_766",
    "204_768",
    "204_77",
    "204_771",
    "204_772",
    "204_773",
    "204_775",
    "204_778",
    "204_779",
    "204_781",
    "204_783",
    "204_784",
    "204_785",
    "204_786",
    "204_787",
    "204_79",
    "204_791",
    "204_792",
    "204_795",
    "204_796",
    "204_797",
    "204_798",
    "204_80",
    "204_800",
    "204_804",
    "204_806",
    "204_809",
    "204_811",
    "204_812",
    "204_813",
    "204_814",
    "204_816",
    "204_822",
    "204_824",
    "204_828",
    "204_829",
    "204_83",
    "204_830",
    "204_832",
    "204_833",
    "204_834",
    "204_835",
    "204_839",
    "204_842",
    "204_843",
    "204_844",
    "204_846",
    "204_847",
    "204_858",
    "204_861",
    "204_864",
    "204_865",
    "204_868",
    "204_869",
    "204_870",
    "204_871",
    "204_873",
    "204_875",
    "204_876",
    "204_877",
    "204_878",
    "204_880",
    "204_881",
    "204_883",
    "204_885",
    "204_886",
    "204_888",
    "204_890",
    "204_891",
    "204_892",
    "204_893",
    "204_898",
    "204_899",
    "204_9",
    "204_90",
    "204_902",
    "204_903",
    "204_904",
    "204_905",
    "204_909",
    "204_91",
    "204_910",
    "204_912",
    "204_913",
    "204_916",
    "204_918",
    "204_920",
    "204_922",
    "204_925",
    "204_926",
    "204_928",
    "204_931",
    "204_932",
    "204_933",
    "204_934",
    "204_935",
    "204_936",
    "204_937",
    "204_944",
    "204_945",
    "204_946",
    "204_947",
    "204_949",
    "204_95",
    "204_951",
    "204_952",
    "204_953",
    "204_954",
    "204_955",
    "204_959",
    "204_961",
    "204_966",
    "204_968",
    "204_97",
    "204_970",
    "204_975",
    "204_976",
    "204_977",
    "204_978",
    "204_979",
    "204_98",
    "204_980",
    "204_982",
    "204_984",
    "204_985",
    "204_987",
    "204_989",
    "204_990",
    "204_992",
    "204_996",
]

TSV_SPLITS = [
    "random-split-1-dev",
    "random-split-1-train",
    "random-split-2-dev",
    "random-split-2-train",
    "random-split-3-dev",
    "random-split-3-train",
    "random-split-4-dev",
    "random-split-4-train",
    "random-split-5-dev",
    "random-split-5-train",
    "rndfake",
    "test",
    "train",
]


class SQA(datasets.ArrowBasedBuilder):
    """TODO: Short description of my dataset."""

    VERSION = datasets.Version("1.1.0")

    # This is an example of a dataset with multiple configurations.
    # If you don't want/need to define several sub-sets in your dataset,
    # just remove the BUILDER_CONFIG_CLASS and the BUILDER_CONFIGS attributes.
    BUILDER_CONFIGS = [
        datasets.BuilderConfig(name=csv_name, description="Single csv file from SQA")
        for csv_name in ["csv_" + id for id in CSV_LIST]
    ] + [datasets.BuilderConfig(name="tsv", description="Question-Answer TSV split from SQA")]

    def _info(self):
        # TODO: Specifies the datasets.DatasetInfo object
        return datasets.DatasetInfo(
            # This is the description that will appear on the datasets page.
            description=_DESCRIPTION,
            # This defines the different columns of the dataset and their types
            # We don't know them yet for all the various CSV files of this dataset
            features=None,
            # If there's a common (input, target) tuple from the features,
            # specify them here. They'll be used if as_supervised=True in
            # builder.as_dataset.
            supervised_keys=None,
            # Homepage of the dataset for documentation
            homepage="https://huggingface.co/great-new-dataset",
            citation=_CITATION,
        )

    def _split_generators(self, dl_manager: datasets.utils.DownloadManager):
        """Returns SplitGenerators."""
        # TODO: Downloads the data and defines the splits
        # dl_manager is a datasets.download.DownloadManager that can be used to
        # download and extract URLs
        dl_dir = dl_manager.download_and_extract(_URL)
        data_dir = os.path.join(dl_dir, "SQA Release 1.0")

        print("RESULTS:", sorted(list(f.replace(".tsv", "") for f in os.listdir(data_dir) if "tsv" in f)))

        if self.config.name.startswith("csv"):
            data_dir = os.path.join(data_dir, "table_csv")
            return [
                datasets.SplitGenerator(
                    name=datasets.Split.TRAIN,
                    # These kwargs will be passed to _generate_examples
                    gen_kwargs={
                        "filepath": os.path.join(data_dir, self.config.name.replace("csv_", "") + ".csv"),
                        "type": "csv",
                    },
                )
            ]

        return [
            datasets.SplitGenerator(
                name=tsv_split_name,
                # These kwargs will be passed to _generate_examples
                gen_kwargs={
                    "filepath": os.path.join(data_dir, tsv_split_name + ".tsv"),
                    "type": "tsv",
                },
            )
            for tsv_split_name in TSV_SPLITS
        ]

    def _generate_tables(self, filepath, type):
        if type == "csv":
            csv_file_reader = pd.read_csv(
                filepath,
                iterator=True,
            )
            for batch_idx, df in enumerate(csv_file_reader):
                pa_table = pa.Table.from_pandas(df, schema=None)
                # Uncomment for debugging (will print the Arrow table size and elements)
                # logger.warning(f"pa_table: {pa_table} num rows: {pa_table.num_rows}")
                # logger.warning('\n'.join(str(pa_table.slice(i, 1).to_pydict()) for i in range(pa_table.num_rows)))
                yield batch_idx, pa_table
        elif type == "tsv":
            csv_file_reader = pd.read_csv(
                filepath,
                sep="\t",
                iterator=True,
            )
            for batch_idx, df in enumerate(csv_file_reader):
                pa_table = pa.Table.from_pandas(df, schema=None)
                # Uncomment for debugging (will print the Arrow table size and elements)
                # logger.warning(f"pa_table: {pa_table} num rows: {pa_table.num_rows}")
                # logger.warning('\n'.join(str(pa_table.slice(i, 1).to_pydict()) for i in range(pa_table.num_rows)))
                yield batch_idx, pa_table

    def _post_process(self, dataset: datasets.Dataset, resources_paths: Dict[str, str]) -> datasets.Dataset:
        """Parse coordinates and text in SQA.
        As proposed in https://github.com/huggingface/datasets/issues/880#issuecomment-732939750
        """

        def _parse_answer_coordinates(answer_coordinate_str):
            """Parses the answer_coordinates of a question.
            Args:
                answer_coordinate_str: A string representation of a Python list of tuple
                strings.
                For example: "['(1, 4)','(1, 3)', ...]"
            """

            try:
                answer_coordinates = []
                # make a list of strings
                coords = ast.literal_eval(answer_coordinate_str)
                # parse each string as a tuple
                for row_index, column_index in sorted(ast.literal_eval(coord) for coord in coords):
                    answer_coordinates.append((row_index, column_index))
            except SyntaxError:
                raise ValueError("Unable to evaluate %s" % answer_coordinate_str)

            return answer_coordinates

        def _parse_answer_text(answer_text):
            """Populates the answer_texts field of `answer` by parsing `answer_text`.
            Args:
                answer_text: A string representation of a Python list of strings.
                For example: "[u'test', u'hello', ...]"
            """
            try:
                answer = []
                for value in ast.literal_eval(answer_text):
                    answer.append(value)
            except SyntaxError:
                raise ValueError("Unable to evaluate %s" % answer_text)

            return answer

        def process_coordinates_and_answers(data):
            data["answer_coordinates"] = [
                _parse_answer_coordinates(coords_str) for coords_str in data["answer_coordinates"]
            ]
            data["answer_text"] = [_parse_answer_text(txt) for txt in data["answer_text"]]
            return data

        dataset = dataset.map(process_coordinates_and_answers, batched=True)

        return dataset
